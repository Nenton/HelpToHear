package com.nenton.speechya.data.storage.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DIALOGS".
*/
public class DialogDao extends AbstractDao<Dialog, Long> {

    public static final String TABLENAME = "DIALOGS";

    /**
     * Properties of entity Dialog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DateCreateDialog = new Property(1, java.util.Date.class, "dateCreateDialog", false, "DATE_CREATE_DIALOG");
        public final static Property LastMessage = new Property(2, String.class, "lastMessage", false, "LAST_MESSAGE");
        public final static Property LastEditDate = new Property(3, java.util.Date.class, "lastEditDate", false, "LAST_EDIT_DATE");
    };

    private DaoSession daoSession;


    public DialogDao(DaoConfig config) {
        super(config);
    }
    
    public DialogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DIALOGS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATE_CREATE_DIALOG\" INTEGER NOT NULL UNIQUE ," + // 1: dateCreateDialog
                "\"LAST_MESSAGE\" TEXT NOT NULL ," + // 2: lastMessage
                "\"LAST_EDIT_DATE\" INTEGER NOT NULL );"); // 3: lastEditDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DIALOGS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Dialog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDateCreateDialog().getTime());
        stmt.bindString(3, entity.getLastMessage());
        stmt.bindLong(4, entity.getLastEditDate().getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Dialog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDateCreateDialog().getTime());
        stmt.bindString(3, entity.getLastMessage());
        stmt.bindLong(4, entity.getLastEditDate().getTime());
    }

    @Override
    protected final void attachEntity(Dialog entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Dialog readEntity(Cursor cursor, int offset) {
        Dialog entity = new Dialog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // dateCreateDialog
            cursor.getString(offset + 2), // lastMessage
            new java.util.Date(cursor.getLong(offset + 3)) // lastEditDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Dialog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDateCreateDialog(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setLastMessage(cursor.getString(offset + 2));
        entity.setLastEditDate(new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Dialog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Dialog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
